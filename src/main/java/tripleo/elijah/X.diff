Only in /home/olu/IdeaProjects/elijah-lang-merge/src/main/java/tripleo/elijah/comp: Operation.java
diff -urw /home/olu/IdeaProjects/elijah-lang-merge/src/main/java/tripleo/elijah/comp/PipelineLogic.java ./comp/PipelineLogic.java
--- /home/olu/IdeaProjects/elijah-lang-merge/src/main/java/tripleo/elijah/comp/PipelineLogic.java	2022-05-05 17:54:31.674725480 -0400
+++ ./comp/PipelineLogic.java	2022-05-05 18:43:40.973071180 -0400
@@ -13,19 +13,11 @@
 import tripleo.elijah.lang.OS_Module;
 import tripleo.elijah.stages.deduce.DeducePhase;
 import tripleo.elijah.stages.gen_c.GenerateC;
-import tripleo.elijah.stages.gen_fn.GenerateFunctions;
-import tripleo.elijah.stages.gen_fn.GeneratePhase;
-import tripleo.elijah.stages.gen_fn.GeneratedClass;
-import tripleo.elijah.stages.gen_fn.GeneratedContainerNC;
-import tripleo.elijah.stages.gen_fn.GeneratedFunction;
-import tripleo.elijah.stages.gen_fn.GeneratedNamespace;
-import tripleo.elijah.stages.gen_fn.GeneratedNode;
-import tripleo.elijah.stages.gen_fn.IdentTableEntry;
+import tripleo.elijah.stages.gen_fn.*;
 import tripleo.elijah.stages.gen_generic.GenerateResult;
 import tripleo.elijah.stages.gen_generic.GenerateResultItem;
 import tripleo.elijah.stages.logging.ElLog;
 import tripleo.elijah.stages.post_deduce.PostDeduce;
-import tripleo.elijah.work.WorkList;
 import tripleo.elijah.work.WorkManager;
 
 import java.io.PrintStream;
@@ -106,15 +98,6 @@
 		//WorkManager wm = new WorkManager();
 		//WorkList wl = new WorkList();
 
-//		for (final GeneratedNode gn : lgc) {
-//			if (gn instanceof GeneratedFunction) {
-//				GeneratedFunction gf = (GeneratedFunction) gn;
-//				for (final Instruction instruction : gf.instructions()) {
-//					System.out.println("8100 " + instruction);
-//				}
-//			}
-//		}
-
 		DeducePhase.@NotNull GeneratedClasses lgc = dp.generatedClasses;
 		List<GeneratedNode> resolved_nodes = new ArrayList<GeneratedNode>();
 
@@ -126,32 +109,15 @@
 				case FUNCTION: {
 //					GeneratedFunction generatedFunction = (GeneratedFunction) generatedNode;
 					if (coded.getCode() == 0)
-						coded.setCode(mod.parent.nextFunctionCode());
+						coded.setCode(mod.getCompilation().nextFunctionCode());
 					break;
 				}
 				case CLASS: {
 					final GeneratedClass generatedClass = (GeneratedClass) generatedNode;
 //					if (generatedClass.getCode() == 0)
-//						generatedClass.setCode(mod.parent.nextClassCode());
-					for (GeneratedClass generatedClass2 : generatedClass.classMap.values()) {
-						if (generatedClass2.getCode() == 0)
-							generatedClass2.setCode(mod.parent.nextClassCode());
-					}
-					for (GeneratedFunction generatedFunction : generatedClass.functionMap.values()) {
-						for (IdentTableEntry identTableEntry : generatedFunction.idte_list) {
-							if (identTableEntry.isResolved()) {
-								GeneratedNode node = identTableEntry.resolvedType();
-								resolved_nodes.add(node);
-							}
-			if (generatedNode instanceof GeneratedFunction) {
-				GeneratedFunction generatedFunction = (GeneratedFunction) generatedNode;
-				if (generatedFunction.getCode() == 0)
-					generatedFunction.setCode(mod.getCompilation().nextFunctionCode());
-			} else if (generatedNode instanceof GeneratedClass) {
-				final GeneratedClass generatedClass = (GeneratedClass) generatedNode;
-//				if (generatedClass.getCode() == 0)
 //					generatedClass.setCode(mod.getCompilation().nextClassCode());
 				for (GeneratedClass generatedClass2 : generatedClass.classMap.values()) {
+						if (generatedClass2.getCode() == 0)
 					generatedClass2.setCode(mod.getCompilation().nextClassCode());
 				}
 				for (GeneratedFunction generatedFunction : generatedClass.functionMap.values()) {
@@ -161,28 +127,16 @@
 							resolved_nodes.add(node);
 						}
 					}
+					}
 					break;
 				}
 				case NAMESPACE:
 				{
 					final GeneratedNamespace generatedNamespace = (GeneratedNamespace) generatedNode;
 					if (coded.getCode() == 0)
-						coded.setCode(mod.parent.nextClassCode());
+						coded.setCode(mod.getCompilation().nextClassCode());
 					for (GeneratedClass generatedClass : generatedNamespace.classMap.values()) {
 						if (generatedClass.getCode() == 0)
-							generatedClass.setCode(mod.parent.nextClassCode());
-					}
-					for (GeneratedFunction generatedFunction : generatedNamespace.functionMap.values()) {
-						for (IdentTableEntry identTableEntry : generatedFunction.idte_list) {
-							if (identTableEntry.isResolved()) {
-								GeneratedNode node = identTableEntry.resolvedType();
-								resolved_nodes.add(node);
-							}
-			} else if (generatedNode instanceof GeneratedNamespace) {
-				final GeneratedNamespace generatedNamespace = (GeneratedNamespace) generatedNode;
-				if (generatedNamespace.getCode() == 0)
-					generatedNamespace.setCode(mod.getCompilation().nextClassCode());
-				for (GeneratedClass generatedClass : generatedNamespace.classMap.values()) {
 					generatedClass.setCode(mod.getCompilation().nextClassCode());
 				}
 				for (GeneratedFunction generatedFunction : generatedNamespace.functionMap.values()) {
@@ -192,6 +146,7 @@
 							resolved_nodes.add(node);
 						}
 					}
+					}
 					break;
 				}
 				default:
@@ -204,17 +159,32 @@
 		}
 
 		for (final GeneratedNode generatedNode : resolved_nodes) {
+/*
+			if (generatedNode instanceof GeneratedFunction) {
+				GeneratedFunction generatedFunction = (GeneratedFunction) generatedNode;
+				if (generatedFunction.getCode() == 0)
+					generatedFunction.setCode(mod.getCompilation().nextFunctionCode());
+			} else if (generatedNode instanceof GeneratedClass) {
+				final GeneratedClass generatedClass = (GeneratedClass) generatedNode;
+				if (generatedClass.getCode() == 0)
+					generatedClass.setCode(mod.getCompilation().nextClassCode());
+			} else if (generatedNode instanceof GeneratedNamespace) {
+				final GeneratedNamespace generatedNamespace = (GeneratedNamespace) generatedNode;
+				if (generatedNamespace.getCode() == 0)
+					generatedNamespace.setCode(mod.getCompilation().nextClassCode());
+			}
+*/
 			if (generatedNode instanceof GNCoded) {
 				final GNCoded coded = (GNCoded) generatedNode;
 				final int code;
 				if (coded.getCode() == 0) {
 					switch (coded.getRole()) {
 					case FUNCTION:
-						code = (mod.parent.nextFunctionCode());
+						code = (mod.getCompilation().nextFunctionCode());
 						break;
 					case NAMESPACE:
 					case CLASS:
-						code = mod.parent.nextClassCode();
+						code = mod.getCompilation().nextClassCode();
 						break;
 					default:
 						throw new IllegalStateException("Invalid coded role");
@@ -223,19 +193,6 @@
 				}
 			} else
 				throw new IllegalStateException("node is not coded");
-			if (generatedNode instanceof GeneratedFunction) {
-				GeneratedFunction generatedFunction = (GeneratedFunction) generatedNode;
-				if (generatedFunction.getCode() == 0)
-					generatedFunction.setCode(mod.getCompilation().nextFunctionCode());
-			} else if (generatedNode instanceof GeneratedClass) {
-				final GeneratedClass generatedClass = (GeneratedClass) generatedNode;
-				if (generatedClass.getCode() == 0)
-					generatedClass.setCode(mod.getCompilation().nextClassCode());
-			} else if (generatedNode instanceof GeneratedNamespace) {
-				final GeneratedNamespace generatedNamespace = (GeneratedNamespace) generatedNode;
-				if (generatedNamespace.getCode() == 0)
-					generatedNamespace.setCode(mod.getCompilation().nextClassCode());
-			}
 		}
 
 		dp.deduceModule(mod, lgc, getVerbosity());
diff -urw /home/olu/IdeaProjects/elijah-lang-merge/src/main/java/tripleo/elijah/comp/WritePipeline.java ./comp/WritePipeline.java
--- /home/olu/IdeaProjects/elijah-lang-merge/src/main/java/tripleo/elijah/comp/WritePipeline.java	2022-05-05 17:47:29.542093446 -0400
+++ ./comp/WritePipeline.java	2022-05-05 18:38:38.690561092 -0400
@@ -123,6 +123,7 @@
 				}
 			}
 		});
+	}
 
 	@Override
 	public void run() throws Exception {
@@ -153,19 +154,9 @@
 	private void write_files_helper(Multimap<String, Buffer> mb) throws IOException {
 		String prefix = file_prefix.toString();
 
-/*
-		// TODO flag?
-		write_inputs(file_prefix);
-*/
-
-/*
-		for (Map.Entry<String, Collection<Buffer>> entry : mb.asMap().entrySet()) {
-*/
 		for (Map.Entry<String, Collection<Buffer>> entry : mb.asMap().entrySet()) {
 			final String key = entry.getKey();
-
 			assert key != null;
-
 			Path path = FileSystems.getDefault().getPath(prefix, key);
 //			BufferedReader reader = Files.newBufferedReader(path, StandardCharsets.UTF_8);
 
Only in /home/olu/IdeaProjects/elijah-lang-merge/src/main/java/tripleo/elijah/lang/builder: ConstructorDefBuilder.java
Only in /home/olu/IdeaProjects/elijah-lang-merge/src/main/java/tripleo/elijah/lang/builder: DestructorDefBuilder.java
Only in /home/olu/IdeaProjects/elijah-lang-merge/src/main/java/tripleo/elijah/lang/builder: FunctionDefBuilder.java
diff -urw /home/olu/IdeaProjects/elijah-lang-merge/src/main/java/tripleo/elijah/lang/IndexingStatement.java ./lang/IndexingStatement.java
--- /home/olu/IdeaProjects/elijah-lang-merge/src/main/java/tripleo/elijah/lang/IndexingStatement.java	2022-05-05 17:58:27.339109438 -0400
+++ ./lang/IndexingStatement.java	2022-05-05 18:41:19.201200418 -0400
@@ -11,9 +11,7 @@
 import antlr.Token;
 import tripleo.elijah.lang.ExpressionList;
 import tripleo.elijah.lang.OS_Module;
-
-import java.util.ArrayList;
-import java.util.List;
+import tripleo.elijah.util.NotImplementedException;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -27,28 +25,33 @@
 
 	private Token name;
 	private ExpressionList exprs;
-	private OS_Module parent;
+	private final OS_Module parent;
 
-	public void setName(final Token i1) {
-		name = i1;
-	}
+	private final List<IndexingItem> items = new ArrayList<IndexingItem>();
 
-	public void setExprs(final ExpressionList el) {
-		exprs = el;
+	public IndexingStatement(final OS_Module aModule) {
+		parent = aModule;
 	}
 
-	public void setModule(final OS_Module module) { parent = module;}
-
-	private final List<IndexingItem> items = new ArrayList<IndexingItem>();
+	public void setName(final Token i1) {
+		name = i1;
+	}
 
 	public void add(final IndexingItem i) {
 		items.add(i);
 	}
 
+	public void setExprs(final ExpressionList el) {
+		exprs = el;
+	}
+
+/*
 	public void setParent(OS_Module aParent) {
 		parent = aParent;
 	}
 
+	public void setModule(final OS_Module module) { parent = module;}
+*/
 }
 
 //
diff -urw /home/olu/IdeaProjects/elijah-lang-merge/src/main/java/tripleo/elijah/lang/OS_Element.java ./lang/OS_Element.java
--- /home/olu/IdeaProjects/elijah-lang-merge/src/main/java/tripleo/elijah/lang/OS_Element.java	2022-05-05 17:37:11.844904373 -0400
+++ ./lang/OS_Element.java	2022-05-05 18:41:19.193201243 -0400
@@ -9,6 +9,7 @@
 package tripleo.elijah.lang;
 
 import org.jetbrains.annotations.Contract;
+import tripleo.elijah.comp.ErrSink;
 import tripleo.elijah.lang2.ElElementVisitor;
 
 public interface OS_Element {
diff -urw /home/olu/IdeaProjects/elijah-lang-merge/src/main/java/tripleo/elijah/lang/OS_Module.java ./lang/OS_Module.java
--- /home/olu/IdeaProjects/elijah-lang-merge/src/main/java/tripleo/elijah/lang/OS_Module.java	2022-05-05 17:56:58.243781363 -0400
+++ ./lang/OS_Module.java	2022-05-05 18:32:18.749521032 -0400
@@ -167,7 +167,7 @@
 	@NotNull public OS_Package pullPackageName() {
 		if (packageNames_q.empty())
 			return OS_Package.default_package;
-		// Don't know if this is correct behavior
+		// Dont know if this is correct behavior
 		return parent.makePackage(packageNames_q.peek());
 	}
 
@@ -299,12 +299,6 @@
 		items.remove(cls);
 	}
 
-/*
-	public void addIndexingStatement(IndexingStatement indexingStatement) {
-		this.indexingStatement = indexingStatement;
-	}
-*/
-
 	public boolean isPrelude() {
 		return prelude == this;
 	}
@@ -317,13 +311,13 @@
 		lsp = aLsp;
 	}
 
-	public void setIndexingStatement(final IndexingStatement i) {
-		indexingStatement = i;
-	}
-
 	public Compilation getCompilation() {
 		return parent;
 	}
+
+	public void setIndexingStatement(final IndexingStatement i) {
+		indexingStatement = i;
+	}
 }
 
 //
diff -urw /home/olu/IdeaProjects/elijah-lang-merge/src/main/java/tripleo/elijah/lang/ParserClosure.java ./lang/ParserClosure.java
--- /home/olu/IdeaProjects/elijah-lang-merge/src/main/java/tripleo/elijah/lang/ParserClosure.java	2022-05-05 17:50:55.771910015 -0400
+++ ./lang/ParserClosure.java	2022-05-05 18:43:40.981070614 -0400
@@ -14,49 +14,52 @@
  */
 package tripleo.elijah.lang;
 
+import org.jetbrains.annotations.Contract;
 import org.jetbrains.annotations.NotNull;
 import tripleo.elijah.comp.Compilation;
 
 public class ParserClosure extends ProgramClosure {
 
 	public ParserClosure(final String fn, @NotNull final Compilation compilation) {
-		module = compilation.moduleBuilder()
-				.withFileName(fn)
-				.addToCompilation()
-				.build();
-
 /*
 		module = new OS_Module();
 		module.setFileName(fn);
 		module.setParent(compilation); // TODO take a look at all this here
 		compilation.addModule(module, fn);
 */
+
+		module = compilation.moduleBuilder()
+				.withFileName(fn)
+				.addToCompilation()
+				.build();
 	}
 
+/*
 	private OS_Module module() {
 		return module;
 	}
+*/
 
 	public OS_Package defaultPackageName(final Qualident aPackageName) {
 //		assert module.packageName == null;
+/*
 		module.pushPackageName(aPackageName);
 		return module.parent.makePackage(aPackageName);
+*/
+		return module.pushPackageNamed(aPackageName);
 	}
 
-//	public void packageName(final Qualident aPackageName) {
-//		//assert module.packageName ==null;
-//		module.pushPackageNamed(aPackageName);
-//	}
-
-//	private OS_Module module() {
-//		return module;
-//	}
+/*
+	public void packageName(final Qualident aPackageName) {
+		//assert module.packageName ==null;
+		module.pushPackageName(aPackageName);
+	}
+*/
 
 	public final OS_Module module;
 
 	public IndexingStatement indexingStatement() {
-		final IndexingStatement indexingStatement = new IndexingStatement();
-		indexingStatement.setModule(module());
+		final IndexingStatement indexingStatement = new IndexingStatement(module);
 		return indexingStatement;
 	}
 
Only in /home/olu/IdeaProjects/elijah-lang-merge/src/main/java/tripleo/elijah/stages/deduce/declarations: DeferredMemberFunction.java
diff -urw /home/olu/IdeaProjects/elijah-lang-merge/src/main/java/tripleo/elijah/stages/generate/OutputStrategyC.java ./stages/generate/OutputStrategyC.java
--- /home/olu/IdeaProjects/elijah-lang-merge/src/main/java/tripleo/elijah/stages/generate/OutputStrategyC.java	2022-05-05 17:37:40.471105742 -0400
+++ ./stages/generate/OutputStrategyC.java	2022-05-05 18:51:48.658330543 -0400
@@ -217,6 +217,7 @@
 		}
 	}
 
+/*
 	public String nameForConstructor(final GeneratedConstructor generatedConstructor, final GenerateResult.TY aTy) {
 		GeneratedNode c = generatedConstructor.getGenClass();
 		if (c == null) c = generatedConstructor.getParent(); // TODO fixme
@@ -226,6 +227,7 @@
 			return nameForNamespace((GeneratedNamespace) c, aTy);
 		return null;
 	}
+*/
 }
 
 //
diff -urw /home/olu/IdeaProjects/elijah-lang-merge/src/main/java/tripleo/elijah/stages/gen_fn/BaseGeneratedFunction.java ./stages/gen_fn/BaseGeneratedFunction.java
--- /home/olu/IdeaProjects/elijah-lang-merge/src/main/java/tripleo/elijah/stages/gen_fn/BaseGeneratedFunction.java	2022-05-05 17:41:51.323344286 -0400
+++ ./stages/gen_fn/BaseGeneratedFunction.java	2022-05-05 18:26:22.082234960 -0400
@@ -409,14 +409,6 @@
 		return vte.getIndex();
 	}
 
-/*
-    @Override
-    public OS_Module module() {
-		throw new NotImplementedException();
-//        return fd.getContext().module();
-    }
-*/
-
 	public int getCode() {
 		return code;
 	}
diff -urw /home/olu/IdeaProjects/elijah-lang-merge/src/main/java/tripleo/elijah/stages/gen_fn/GeneratedFunction.java ./stages/gen_fn/GeneratedFunction.java
--- /home/olu/IdeaProjects/elijah-lang-merge/src/main/java/tripleo/elijah/stages/gen_fn/GeneratedFunction.java	2022-05-05 18:06:36.337740879 -0400
+++ ./stages/gen_fn/GeneratedFunction.java	2022-05-05 18:30:40.946387008 -0400
@@ -69,11 +69,11 @@
 	public Role getRole() {
 		return Role.FUNCTION;
 	}
+
 	@Override
 	public OS_Module module() {
         return getFD().getContext().module();
 	}
-
 }
 
 //
Only in .: X.diff
