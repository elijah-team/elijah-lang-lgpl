// $ANTLR 2.7.7 (20060906): "elijjah.g" -> "ElijjahParser.java"$

  package tripleo.elijjah;

public interface ElijjahTokenTypes {
	int EOF = 1;
	int NULL_TREE_LOOKAHEAD = 3;
	int AS = 4;
	int CAST_TO = 5;
	int LITERAL_package = 6;
	int LITERAL_indexing = 7;
	int IDENT = 8;
	int TOK_COLON = 9;
	int STRING_LITERAL = 10;
	int CHAR_LITERAL = 11;
	int NUM_INT = 12;
	int NUM_FLOAT = 13;
	int DOT = 14;
	int LITERAL_class = 15;
	int LITERAL_struct = 16;
	int LITERAL_signature = 17;
	int LITERAL_abstract = 18;
	int LPAREN = 19;
	int RPAREN = 20;
	int LCURLY = 21;
	int RCURLY = 22;
	int LITERAL_interface = 23;
	int LITERAL_type = 24;
	int BECOMES = 25;
	int BOR = 26;
	int ANNOT = 27;
	int RBRACK = 28;
	int LITERAL_namespace = 29;
	int LITERAL_from = 30;
	int LITERAL_import = 31;
	int COMMA = 32;
	int LT_ = 33;
	int LITERAL_constructor = 34;
	int LITERAL_ctor = 35;
	int LITERAL_destructor = 36;
	int LITERAL_dtor = 37;
	int LITERAL_continue = 38;
	int LITERAL_break = 39;
	int LITERAL_return = 40;
	int LITERAL_with = 41;
	int LITERAL_pre = 42;
	int LITERAL_post = 43;
	int LITERAL_const = 44;
	int LITERAL_immutable = 45;
	int TOK_ARROW = 46;
	int LITERAL_var = 47;
	int LITERAL_val = 48;
	int LITERAL_alias = 49;
	int LITERAL_construct = 50;
	int LITERAL_yield = 51;
	int SEMI = 52;
	int LITERAL_invariant = 53;
	int LITERAL_access = 54;
	int EQUAL = 55;
	int PLUS_ASSIGN = 56;
	int MINUS_ASSIGN = 57;
	int STAR_ASSIGN = 58;
	int DIV_ASSIGN = 59;
	int MOD_ASSIGN = 60;
	int SR_ASSIGN = 61;
	int BSR_ASSIGN = 62;
	int SL_ASSIGN = 63;
	int BAND_ASSIGN = 64;
	int BXOR_ASSIGN = 65;
	int BOR_ASSIGN = 66;
	int LOR = 67;
	int LAND = 68;
	int BXOR = 69;
	int BAND = 70;
	int NOT_EQUAL = 71;
	int GT = 72;
	int LE = 73;
	int GE = 74;
	int LITERAL_is_a = 75;
	int SL = 76;
	int SR = 77;
	int BSR = 78;
	int PLUS = 79;
	int MINUS = 80;
	int STAR = 81;
	int DIV = 82;
	int MOD = 83;
	int INC = 84;
	int DEC = 85;
	int BNOT = 86;
	int LNOT = 87;
	int LBRACK = 88;
	int LITERAL_true = 89;
	int LITERAL_false = 90;
	int LITERAL_this = 91;
	int LITERAL_null = 92;
	int LITERAL_function = 93;
	int LITERAL_procedure = 94;
	int LITERAL_if = 95;
	int LITERAL_else = 96;
	int LITERAL_elseif = 97;
	int LITERAL_match = 98;
	int LITERAL_case = 99;
	int LITERAL_while = 100;
	int LITERAL_do = 101;
	int LITERAL_iterate = 102;
	int LITERAL_to = 103;
	int LITERAL_generic = 104;
	int QUESTION = 105;
	int LITERAL_typeof = 106;
	int LITERAL_func = 107;
	int LITERAL_proc = 108;
	int LITERAL_in = 109;
	int LITERAL_out = 110;
	int LITERAL_ref = 111;
	int LITERAL_def = 112;
	int LITERAL_prop = 113;
	int LITERAL_property = 114;
	int LITERAL_get = 115;
	int LITERAL_set = 116;
	int WS = 117;
	int SL_COMMENT = 118;
	int ML_COMMENT = 119;
	int ESC = 120;
	int HEX_DIGIT = 121;
	int VOCAB = 122;
	int EXPONENT = 123;
	int FLOAT_SUFFIX = 124;
}
