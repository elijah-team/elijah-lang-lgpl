// $ANTLR 2.7.1: "elijjah.g" -> "ElijjahParser.java"$

  package tripleo.elijjah;

public interface ElijjahTokenTypes {
	int EOF = 1;
	int NULL_TREE_LOOKAHEAD = 3;
	int LITERAL_tokens = 4;
	int LITERAL_indexing = 5;
	int IDENT = 6;
	int TOK_COLON = 7;
	int LITERAL_package = 8;
	int STRING_LITERAL = 9;
	int CHAR_LITERAL = 10;
	int NUM_INT = 11;
	int NUM_FLOAT = 12;
	int LBRACK = 13;
	int RBRACK = 14;
	int DOT = 15;
	int LITERAL_class = 16;
	int LITERAL_interface = 17;
	int LITERAL_struct = 18;
	int LITERAL_signature = 19;
	int LITERAL_abstract = 20;
	int LPAREN = 21;
	int RPAREN = 22;
	int LCURLY = 23;
	int RCURLY = 24;
	int LITERAL_namespace = 25;
	int LITERAL_from = 26;
	int LITERAL_import = 27;
	int COMMA = 28;
	int BECOMES = 29;
	int LT_ = 30;
	int LITERAL_constructor = 31;
	int LITERAL_ctor = 32;
	int LITERAL_destructor = 33;
	int LITERAL_dtor = 34;
	int LITERAL_const = 35;
	int LITERAL_typeof = 36;
	int LITERAL_immutable = 37;
	int TOK_ARROW = 38;
	int LITERAL_var = 39;
	int LITERAL_val = 40;
	int LITERAL_type = 41;
	int LITERAL_alias = 42;
	int LITERAL_construct = 43;
	int LITERAL_yield = 44;
	int SEMI = 45;
	int LITERAL_once = 46;
	int LITERAL_local = 47;
	int LITERAL_tagged = 48;
	int LITERAL_pooled = 49;
	int LITERAL_manual = 50;
	int LITERAL_gc = 51;
	int LITERAL_in = 52;
	int LITERAL_out = 53;
	int LITERAL_ref = 54;
	int LITERAL_generic = 55;
	int LITERAL_invariant = 56;
	int LITERAL_access = 57;
	int PLUS_ASSIGN = 58;
	int MINUS_ASSIGN = 59;
	int STAR_ASSIGN = 60;
	int DIV_ASSIGN = 61;
	int MOD_ASSIGN = 62;
	int SR_ASSIGN = 63;
	int BSR_ASSIGN = 64;
	int SL_ASSIGN = 65;
	int BAND_ASSIGN = 66;
	int BXOR_ASSIGN = 67;
	int BOR_ASSIGN = 68;
	int LOR = 69;
	int LAND = 70;
	int BOR = 71;
	int BXOR = 72;
	int BAND = 73;
	int NOT_EQUAL = 74;
	int EQUAL = 75;
	int GT = 76;
	int LE = 77;
	int GE = 78;
	int LITERAL_is_a = 79;
	int SL = 80;
	int SR = 81;
	int BSR = 82;
	int PLUS = 83;
	int MINUS = 84;
	int STAR = 85;
	int DIV = 86;
	int MOD = 87;
	int INC = 88;
	int DEC = 89;
	int BNOT = 90;
	int LNOT = 91;
	int LITERAL_this = 92;
	int LITERAL_true = 93;
	int LITERAL_false = 94;
	int LITERAL_null = 95;
	int LITERAL_function = 96;
	int LITERAL_procedure = 97;
	int LITERAL_void = 98;
	int LITERAL_boolean = 99;
	int LITERAL_byte = 100;
	int LITERAL_char = 101;
	int LITERAL_short = 102;
	int LITERAL_int = 103;
	int LITERAL_float = 104;
	int LITERAL_long = 105;
	int LITERAL_double = 106;
	int LITERAL_if = 107;
	int LITERAL_else = 108;
	int LITERAL_while = 109;
	int LITERAL_do = 110;
	int LITERAL_iterate = 111;
	int LITERAL_to = 112;
	int LITERAL_with = 113;
	int LITERAL_elseif = 114;
	int LITERAL_def = 115;
	int QUESTION = 116;
	int LT = 117;
	int WS = 118;
	int SL_COMMENT = 119;
	int ML_COMMENT = 120;
	int ESC = 121;
	int HEX_DIGIT = 122;
	int VOCAB = 123;
	int INTLIT_TY = 124;
	int EXPONENT = 125;
	int FLOAT_SUFFIX = 126;
}
