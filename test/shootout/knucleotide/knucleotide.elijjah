indexing
    inspriation: "https://salsa.debian.org/benchmarksgame-team/archive-alioth-benchmarksgame/-/blob/master/contributed-source-code/shootout/knucleotide/knucleotide.nice"
    inspriation: "https://salsa.debian.org/benchmarksgame-team/archive-alioth-benchmarksgame/-/raw/master/contributed-source-code/shootout/knucleotide/knucleotide.nice"
    date: "121120200033"

/* The Computer Language Shootout 
   http://shootout.alioth.debian.org/
   contributed by Isaac Gouy, following James McIlree's Java program
*/

import std.stdio;
import std.collections;

// TODO: where to import StringBuffer from?

#pragma nullable

void main() {
//   val r = new BufferedReader(new InputStreamReader(System.in));
   val buffer = StringBuffer();
   var line: String?; 

   while ((cin >> line) != null){
      if (line.startsWith(">THREE")) break;
   }

   while ((cin >> line) != null){
      let c = line[0];
      if (c == '>')
         break; 
      else if (c != ';')
         buffer.append(line.toUpperCase());
   }

   val kn = KNucleotide(/*sequence:*/ buffer.toString());
   kn.writeFrequencies(1);
   kn.writeFrequencies(2);

   kn.writeCount("GGT");
   kn.writeCount("GGTA");
   kn.writeCount("GGTATT");
   kn.writeCount("GGTATTTTAATT");
   kn.writeCount("GGTATTTTAATTTATAGT");
}


class KNucleotide {
   var sequence: String;
   var count = 1;

   constructor(seq: String) {
      sequence = seq;
   }

   void writeFrequencies(k: Integer) {
      val frequencies = this.generateFrequencies(k);

      val list = new ArrayList(frequencies.values);
      sort(list, {| k1: KNucleotide, k2: KNucleotide k2|
                     val i = k2.count - k1.count; 
                     Value =  i != 0 ? i : k2.sequence.compareTo(k1.sequence);
                  }
         );

      let sum = sequence.length - k + 1.0;
      iterate list with kn {
         println(kn.sequence + " " + (kn.count/sum * 100.0).toStringWith(3));
      }

      println();
   }


   void writeCount(nucleotideFragment: String) {
      val frequencies = /*this.*/generateFrequencies(nucleotideFragment.length);
      var count = 0;
      val item/*?*/ = frequencies[nucleotideFragment];
      if (item != None) count = item.count;
      println(count + "\t" + nucleotideFragment);
   }

   Map<String,KNucleotide?> generateFrequencies(length: Integer) {
      val frequencies: HashMap<String,KNucleotide> frequencies;
      construct frequencies

      val kFrequency = function(offset: Integer, k: Integer) {
         val n = sequence.length - k + 1;
         iterate from offset to n with i by k {
             //for(int i=offset; i<n; i+=k) {
            val fragment = sequence.substring(i,i+k);
            val item = frequencies[fragment];
            if (item != None)
               item.count++;
            else
               frequencies[fragment] = KNucleotide(/*sequence:*/ fragment);
         }
      }

        iterate from 0 to length with offset {
      //for(int offset=0; offset<length; offset++) 
            kFrequency(offset,length);
        }
        return frequencies;
   }
}
